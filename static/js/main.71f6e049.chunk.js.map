{"version":3,"sources":["components/Header/Header.jsx","store/actions.js","components/App/App.js","serviceWorker.js","store/reducer.js","store/index.js","components/Questions/QuestionItem.jsx","components/Questions/Question.jsx","components/Result/Result.jsx","index.js"],"names":["Header","react_default","a","createElement","className","addScore","score","type","payload","App","this","props","dispatch","getState","fetch","then","res","json","data","results","classes","components_Header_Header","Link","to","Button_default","variant","color","button","Component","connect","state","questions","withStyles","theme","margin","spacing","unit","Boolean","window","location","hostname","match","initState","scores","combineReducers","arguments","length","undefined","action","console","log","newquestions","Object","toConsumableArray","forEach","question","index","id","objectSpread","newscore","push","store","createStore","reducer","applyMiddleware","thunk","QuestionItem","handleClick","_this","answer","isCorrect","onClick","dangerouslySetInnerHTML","__html","content","Question","handleNext","len","history","concat","Paper_default","root","elevation","answers","map","Questions_QuestionItem","key","Ownprops","values","filter","parseInt","params","incorrect_answers","correct_answer","mixins","gutters","paddingTop","paddingBottom","marginTop","Result","_Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","value","ReactDOM","render","es","BrowserRouter","Switch","Route","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2QAWeA,eARA,WACb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,4BCFOE,EAAW,SAACC,GAAD,MAAY,CAChCC,KALqB,WAMrBC,QAAQF,ICSNG,8LAGFC,KAAKC,MAAMC,SDDqB,SAACA,EAAUC,GAC3C,OAAOC,MAAM,wCACZC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIN,EAVP,CACHL,KAVqB,eAWrBC,QAQgCU,EAAKC,+CCClC,IACCC,EAAYV,KAAKC,MAAjBS,QACR,OACEnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkB,EAAD,MACApB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAMC,GAAK,eACPtB,EAAAC,EAAAC,cAACqB,EAAAtB,EAAD,CAAQuB,QAAQ,YAAYC,MAAM,UAAUtB,UAAWgB,EAAQO,QAA/D,mBAbIC,aA6BHC,cANU,SAACC,GACxB,MAAM,CACJC,UAAWD,EAAMC,YAINF,CAA0BG,qBAnC1B,SAAAC,GAAK,MAAK,CACvBN,OAAQ,CACNO,OAAQD,EAAME,QAAQC,QAiCeJ,CAAmBvB,IChCxC4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uFCdAC,UAAY,CACdX,UAAU,GACVY,OAAO,KAuCIC,cAAgB,CAC3Bb,UAtCc,WAA6B,IAA5BD,EAA4Be,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBH,EAAWM,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAE3C,OADAE,QAAQC,IAAI,SAASF,GACdA,EAAOzC,MACV,IHVqB,eGWjB,IAAM4C,EAAYC,OAAAC,EAAA,EAAAD,CAAOtB,EAAMC,WAK/B,OAJAiB,EAAOxC,QAAQ8C,QAAQ,SAACC,EAAUC,GAC9BD,EAASE,GAAKD,EACdL,EAAaI,EAASE,IAAKF,IAExBH,OAAAM,EAAA,EAAAN,CAAA,GACAtB,EADP,CAEIC,UAAUoB,IAElB,QACI,OAAOrB,IAyBfa,OApBW,WAA6B,IAA5Bb,EAA4Be,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBH,EAAWM,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAExC,OADAE,QAAQC,IAAI,SAAUF,GACdA,EAAOzC,MACX,IH9BiB,WG+Bf,IAAMoD,EAAQP,OAAAC,EAAA,EAAAD,CAAOtB,EAAMa,QAI3B,OAHAM,QAAQC,IAAI,WAAWS,GACvBA,EAASC,KAAKZ,EAAOxC,SACrByC,QAAQC,IAAI,WAAWS,GAChBP,OAAAM,EAAA,EAAAN,CAAA,GACAtB,EADP,CAEIa,OAAOgB,IAEb,QACE,OAAO7B,cClCF+B,EAFDC,YAAYC,EAASC,YAAgBC,kDCE7CC,qNAEJC,YAAc,WACVC,EAAKzD,MAAMC,SAASP,EAAS+D,EAAKzD,MAAM0D,OAAOC,qFAIjD,OADErB,QAAQC,IAAI,WAAWxC,KAAKC,OAE5BV,EAAAC,EAAAC,cAAA,OAAKoE,QAAS7D,KAAKyD,aACjBlE,EAAAC,EAAAC,cAAA,OAAKqE,wBAA0B,CAAEC,OAAQ/D,KAAKC,MAAM0D,OAAOK,mBATxC9C,cAeZC,gBAAUqC,GCEnBS,6MAEHC,WAAa,WACNR,EAAKzD,MAAM4C,SAASE,GAAKW,EAAKzD,MAAMkE,IAAM,EACxCT,EAAKzD,MAAMmE,QAAQlB,KAAnB,cAAAmB,OAAsCX,EAAKzD,MAAM4C,SAASE,GAAK,IAE/DW,EAAKzD,MAAMmE,QAAQlB,KAAK,oFAKzB,IACCxC,EAAYV,KAAKC,MAAjBS,QAER,OADA6B,QAAQC,IAAI,QAAQxC,KAAKC,OAEvBV,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACkB,EAAD,MACApB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACLH,EAAAC,EAAAC,cAAC6E,EAAA9E,EAAD,CAAOE,UAAWgB,EAAQ6D,KAAMC,UAAW,GACvCjF,EAAAC,EAAAC,cAAA,KAAGqE,wBAA0B,CAAEC,OAAQ/D,KAAKC,MAAM4C,SAASA,YAC3DtD,EAAAC,EAAAC,cAAA,WAEIO,KAAKC,MAAM4C,SAAS4B,QAAQC,IAAI,SAACf,EAAQb,GAAT,OAC5BvD,EAAAC,EAAAC,cAACkF,EAAD,CAAcC,IAAK9B,EAAOa,OAAQA,OAI1CpE,EAAAC,EAAAC,cAACqB,EAAAtB,EAAD,CAAQqE,QAAS7D,KAAKkE,WAAYnD,QAAQ,YAAYC,MAAM,UAAUtB,UAAWgB,EAAQO,QAAzF,kBA3BGC,aA6DRC,cAxBS,SAACC,EAAOyD,GAC5BtC,QAAQC,IAAI,SAASpB,EAAMC,UAAUA,WACrC,IAAMwB,EAAWH,OAAOoC,OAAO1D,EAAMC,UAAUA,WAAW0D,OAAO,SAAAlC,GAAQ,OACtEA,EAASE,KAAOiC,SAASH,EAAS9C,MAAMkD,OAAOlC,GAAI,MAChD,GAEF,IAAIF,EACA,MAAM,CAACA,SAAS,MAEtB,IAAI4B,EAAU5B,EAASqC,kBAAkBR,IAAI,SAAAf,GAAM,MAAK,CAACK,QAAQL,EAAQC,WAAU,KASrF,OAREa,EAAQvB,KAAK,CACTc,QAAQnB,EAASsC,eACjBvB,WAAU,IAGdf,EAAS4B,QAAUA,EAGd,CACHN,IAAK/C,EAAMC,UAAUA,UAAUe,OAC/BS,SAAUA,IAIH1B,CAAyBG,qBA1EzB,SAAAC,GAAK,MAAK,CACrBgD,KAAK7B,OAAAM,EAAA,EAAAN,CAAA,GACAnB,EAAM6D,OAAOC,UADd,CAEFC,WAAiC,EAArB/D,EAAME,QAAQC,KAC1B6D,cAAoC,EAArBhE,EAAME,QAAQC,KAC7B8D,UAAU,KAGZvE,OAAQ,CACJO,OAAQD,EAAME,QAAQC,QAiEUJ,CAAmB2C,IChF9CwB,UAAb,SAAAC,GAAA,SAAAD,IAAA,OAAA/C,OAAAiD,EAAA,EAAAjD,CAAA1C,KAAAyF,GAAA/C,OAAAkD,EAAA,EAAAlD,CAAA1C,KAAA0C,OAAAmD,EAAA,EAAAnD,CAAA+C,GAAAK,MAAA9F,KAAAmC,YAAA,OAAAO,OAAAqD,EAAA,EAAArD,CAAA+C,EAAAC,GAAAhD,OAAAsD,EAAA,EAAAtD,CAAA+C,EAAA,EAAAb,IAAA,SAAAqB,MAAA,WAEI,OACE1G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,0BAAA4E,OAAqBrE,KAAKC,MAAML,aALxC6F,EAAA,CAA4BvE,cAiBbC,cANS,SAACC,GAErB,OADAmB,QAAQC,IAAI,QAASpB,GACd,CACHxB,MAAOwB,EAAMa,OAAOA,OAAO8C,OAAO,SAAAnF,GAAK,OAAIA,IAAOwC,SAG3CjB,CAAyBsE,GCVxCS,IAASC,OACO5G,EAAAC,EAAAC,cAAC2G,EAAA,EAAD,CAAUjD,MAAOA,GACb5D,EAAAC,EAAAC,cAAC4G,EAAA,EAAD,KACI9G,EAAAC,EAAAC,cAAC6G,EAAA,EAAD,KACI/G,EAAAC,EAAAC,cAAC8G,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW3G,IACjCR,EAAAC,EAAAC,cAAC8G,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,iBAAiBC,UAAWzC,IAC9C1E,EAAAC,EAAAC,cAAC8G,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,UAAUC,UAAYjB,OAIpDkB,SAASC,eAAe,SN4GlC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1G,KAAK,SAAA2G,GACjCA,EAAaC","file":"static/js/main.71f6e049.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nconst Header = () => {\n  return (\n    <div className=\"App-header\">\n      <h1>Trivial App</h1>\n    </div>\n  )\n}\n\nexport default Header\n","export const ADD_SCORE = 'addscore'\nexport const ADD_QUESTIONS = 'addQuestions';\n\n\nexport const addScore = (score) => ({\n    type:ADD_SCORE,\n    payload:score\n})\n\nexport const addQuestions = (questions) => {\n    return {\n        type:ADD_QUESTIONS,\n        payload:questions\n    }\n}\n\n\nexport const fetchQuestions = () => (dispatch, getState) => {\n    return fetch('https://opentdb.com/api.php?amount=3')\n    .then(res => res.json())\n    .then(data => dispatch(addQuestions(data.results)))\n    \n}","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { Link } from 'react-router-dom'\nimport { withStyles } from '@material-ui/core/styles';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport Header from '../Header/Header';\nimport { fetchQuestions } from \"../../store/actions\";\n\nconst styles = theme => ({\n  button: {\n    margin: theme.spacing.unit,                                                 \n  }\n});                                                                                                                                                          \n\nclass App extends Component {\n\n  componentDidMount(){\n    this.props.dispatch(fetchQuestions());\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div>\n        <Header/>\n        <div className=\"App-intro\">\n          <Link to = 'questions/0'>\n              <Button variant=\"contained\" color=\"primary\" className={classes.button}>\n                  Start\n              </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst maptStateToProps = (state) => {\n  return{\n    questions: state.questions\n  }\n}\n\nexport default connect(maptStateToProps)(withStyles(styles)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_SCORE, ADD_QUESTIONS } from './actions';\nimport { combineReducers } from 'redux';\nimport uuid from 'uuid';\n\nconst initState = {\n    questions:[],\n    scores:[]\n}\nconst questions = (state=initState, action) => {\n    console.log('quesss',action)\n    switch(action.type){\n        case ADD_QUESTIONS:\n            const newquestions = [...state.questions];\n            action.payload.forEach((question, index) => {\n                question.id = index;\n                newquestions[question.id]= question\n            });\n            return {\n                ...state,\n                questions:newquestions\n            }\n        default:\n            return state\n    }\n}\n\n\nconst scores = (state=initState, action) => {\n    console.log('action', action)\n    switch (action.type){\n        case ADD_SCORE:\n          const newscore = [...state.scores];\n          console.log('newscore',newscore)\n          newscore.push(action.payload);\n          console.log('newscore',newscore)\n          return {\n              ...state,             \n              scores:newscore\n          }\n        default:\n          return state;\n\n    }\n}\n\nexport default combineReducers({\n    questions,\n    scores,\n  });\n  \n\n","import { createStore, applyMiddleware } from'redux';\nimport reducer from './reducer';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nexport default store;","import React, { Component } from 'react'\nimport Button from '@material-ui/core/Button';\nimport { addScore } from '../../store/actions';\nimport { connect } from 'react-redux';\n\n\nclass QuestionItem extends Component {\n\n  handleClick = () => {\n      this.props.dispatch(addScore(this.props.answer.isCorrect));\n  }\n  render() {\n      console.log('quesitem',this.props);\n    return (\n      <div onClick={this.handleClick}>\n        <div dangerouslySetInnerHTML={ { __html: this.props.answer.content } } />\n      </div>\n    )\n  }\n}\n\nexport default connect()(QuestionItem)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles } from '@material-ui/core/styles';\nimport './Question.css';\nimport Header from '../Header/Header';\nimport QuestionItem from './QuestionItem';\nimport Button from '@material-ui/core/Button';\n\n\nconst styles = theme => ({\n    root: {\n      ...theme.mixins.gutters(),\n      paddingTop: theme.spacing.unit * 2,\n      paddingBottom: theme.spacing.unit * 2,\n      marginTop:10,\n    },\n\n    button: {\n        margin: theme.spacing.unit,                                                 \n      }\n  });\n\nclass Question extends Component {\n  \n   handleNext = () => {\n       if(this.props.question.id < this.props.len - 1 ){\n            this.props.history.push(`/questions/${this.props.question.id + 1}`)\n       } else {\n            this.props.history.push('/result')\n       }\n        \n    }\n  \n  render() {\n    const { classes } = this.props;\n    console.log('quest',this.props);\n    return (\n      <div>\n      <Header/>\n      <div className=\"paper\">\n                <Paper className={classes.root} elevation={7}>\n                    <p dangerouslySetInnerHTML={ { __html: this.props.question.question } } />\n                    <div>\n                        {\n                        this.props.question.answers.map((answer, index) => \n                            <QuestionItem key={index} answer={answer}/>\n                        )\n                        }\n                    </div>\n                    <Button onClick={this.handleNext} variant=\"contained\" color=\"primary\" className={classes.button}>\n                  Next\n                     </Button>\n                </Paper>\n      </div>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state, Ownprops) => {\n    console.log('mapppp',state.questions.questions);\n    const question = Object.values(state.questions.questions).filter(question => \n       question.id === parseInt(Ownprops.match.params.id, 10)\n        )[0]\n\n        if(!question){\n            return{question:null}\n        }\n      let answers = question.incorrect_answers.map(answer => ({content:answer, isCorrect:false}))\n      answers.push({\n          content:question.correct_answer,\n          isCorrect:true,\n      })\n\n      question.answers = answers\n      \n      \n    return {\n        len: state.questions.questions.length,\n        question: question\n    }\n}\n\nexport default connect(mapStateToProps)(withStyles(styles)(Question))\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport './Result.css';\n\nexport class Result extends Component {\n  render() {\n    return (\n      <div className=\"Result\">\n        <h4>Game Finished</h4>\n        <p>{`Your score is ${this.props.score}`}</p>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n    console.log('state', state);\n    return {\n        score: state.scores.scores.filter(score => score).length\n    }\n}   \nexport default connect(mapStateToProps)(Result)\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter, Switch, Route, Link } from 'react-router-dom'\nimport Question from './components/Questions/Question';\nimport Result from './components/Result/Result';\n\nReactDOM.render(\n                <Provider store={store}>\n                    <BrowserRouter>\n                        <Switch>\n                            <Route exact path='/' component={App} />\n                            <Route exact path='/questions/:id' component={Question}/>\n                            <Route exact path='/result' component={ Result }/>\n                        </Switch>\n                    </BrowserRouter>\n                </Provider>, \n                document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}